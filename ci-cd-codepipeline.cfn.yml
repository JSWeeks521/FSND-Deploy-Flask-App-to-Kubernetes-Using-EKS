---
AWSTemplateFormatVersion: 2010-09-09

Description: EKSWSV1


Parameters:

  EksClusterName:
    Type: String
    Description: The name of the EKS cluster created
    Default: simple-jwt-api
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the EKS cluster name

  GitSourceRepo:
    Type: String
    Description: GitHub source repository - must contain a Dockerfile and buildspec.yml in the base
    Default: FSND-Deploy-Flask-App-to-Kubernetes-Using-EKS
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository name

  GitBranch:
    Type: String
    Default: master
    Description: GitHub git repository branch - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository branch name

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub API token - see https://github.com/blog/1509-personal-api-tokens
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub personal access token

  GitHubUser:
    Type: String
    Default: JSWeeks521
    Description: GitHub username or organization
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub username or organization

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:4.0
    Description: AWS CodeBuild Docker optimized image
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a CodeBuild Docker image

  KubectlRoleName:
    Type: String
    Default: UdacityFlaskDeployCBKubectlRole
    Description: IAM role used by kubectl to interact with EKS cluster
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a kubectl IAM role


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GitHub
        Parameters:
          - GitHubUser
          - GitHubToken
          - GitSourceRepo
          - GitBranch
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildDockerImage
      - Label:
          default: IAM
        Parameters:
          - KubectlRoleName
      - Label:
          default: EKS
        Parameters:
          - EksClusterName
    ParameterLabels:
      GitHubUser:
        default: Username
      GitHubToken:
        default: Access token
      GitSourceRepo:
        default: Repository
      GitBranch:
        default: Branch
      CodeBuildDockerImage:
        default: Docker image
      KubectlRoleName:
        default: kubectl IAM role
      EksClusterName:
        default: EKS cluster name


Resources:
  CodeBuildProject:
    DependsOn: KubectlAssumeRoleCustomResource
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          -
            Name: REPOSITORY_URI
            Value: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}"
          -
            Name: REPOSITORY_NAME
            Value: GitSourceRepo
          -
            Name: REPOSITORY_BRANCH
            Value: GitBranch
          -
            Name: EKS_CLUSTER_NAME
            Value: EksClusterName
          -
            Name: EKS_KUBECTL_ROLE_ARN
            Value: "arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}"
        Image: CodeBuildDockerImage
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name: "AWS::StackName"
      ServiceRole: CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
    Type: "AWS::CodeBuild::Project"
  CodeBuildServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Action:
                  - "sts:AssumeRole"
                Effect: Allow
                Resource: "arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}"
              -
                Action:
                  - "eks:Describe*"
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - "ssm:GetParameters"
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - "ecr:GetAuthorizationToken"
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeVpcs"
                  - "ec2:CreateNetworkInterfacePermission"
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetObjectVersion"
                Effect: Allow
                Resource: "arn:aws:s3:::${CodePipelineArtifactBucket}/*"
              -
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                Effect: Allow
                Resource: "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}"
            Version: 2012-10-17
          PolicyName: root
    Type: "AWS::IAM::Role"
  CodePipelineArtifactBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
  CodePipelineGitHub:
    DependsOn: CodeBuildProject
    Properties:
      ArtifactStore:
        Location: CodePipelineArtifactBucket
        Type: S3
      RoleArn: CodePipelineServiceRole.Arn
      Stages:
        -
          Actions:
            -
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Branch: GitBranch
                OAuthToken: GitHubToken
                Owner: GitHubUser
                Repo: GitSourceRepo
              Name: App
              OutputArtifacts:
                -
                  Name: App
              RunOrder: 1
          Name: Source
        -
          Actions:
            -
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: CodeBuildProject
              InputArtifacts:
                -
                  Name: App
              Name: Build
              OutputArtifacts:
                -
                  Name: BuildOutput
              RunOrder: 1
          Name: Build
    Type: "AWS::CodePipeline::Pipeline"
  CodePipelineServiceRole:
    DependsOn: CodePipelineArtifactBucket
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:CancelUploadArchive"
                  - "iam:PassRole"
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                Effect: Allow
                Resource: "arn:aws:s3:::${CodePipelineArtifactBucket}/*"
            Version: 2012-10-17
          PolicyName: codepipeline-access
    Type: "AWS::IAM::Role"
  CustomResourceLambda:
    Properties:
      Code:
        ZipFile: |
            import json
            import boto3
            from botocore.vendored import requests
            def handler(event, context):
              response = {
                'Status': 'SUCCESS',
                "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                'PhysicalResourceId': context.log_stream_name,
                'StackId': event['StackId'],
                'RequestId': event['RequestId'],
                'LogicalResourceId': event['LogicalResourceId'],
                'Data': {"Message": "Resource creation successful!"},
              }

              client = boto3.client('iam')
              try:
                if event['RequestType'] == 'Create':
                  kubectl_role_name = event['ResourceProperties']['KubectlRoleName']
                  build_role_arn = event['ResourceProperties']['CodeBuildServiceRoleArn']

                  assume = client.get_role(RoleName = kubectl_role_name)
                  assume_doc = assume['Role']['AssumeRolePolicyDocument']
                  roles = [ { 'Effect': 'Allow', 'Principal': { 'AWS': build_role_arn }, 'Action': 'sts:AssumeRole' } ]

                  for statement in assume_doc['Statement']:
                    if 'AWS' in statement['Principal']:
                      if statement['Principal']['AWS'].startswith('arn:aws:iam:'):
                        roles.append(statement)

                  assume_doc['Statement'] = roles
                  update_response = client.update_assume_role_policy(RoleName = kubectl_role_name, PolicyDocument = json.dumps(assume_doc))
              except Exception as e:
                print(e)
                response['Status'] = 'FAILED'
                response["Reason"] = e
                response['Data'] = {"Message": "Resource creation failed"}

              response_body = json.dumps(response)
              headers = {'content-type': '', "content-length": str(len(response_body)) }
              put_response = requests.put(event['ResponseURL'], headers=headers, data=response_body)
              return response
      Handler: index.handler
      Role: CustomResourceLambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 300
    Type: "AWS::Lambda::Function"
  CustomResourceLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess"
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Action:
                  - "iam:GetRole"
                  - "iam:UpdateAssumeRolePolicy"
                Effect: Allow
                Resource: "arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}"
            Version: 2012-10-17
          PolicyName: codepipeline-access
    Type: "AWS::IAM::Role"
  EcrDockerRepository:
    DeletionPolicy: Retain
    Type: "AWS::ECR::Repository"
  KubectlAssumeRoleCustomResource:
    DependsOn:
      - CustomResourceLambda
      - CodeBuildServiceRole
    Properties:
      CodeBuildServiceRoleArn: CodeBuildServiceRole.Arn
      KubectlRoleName: KubectlRoleName
      ServiceToken: CustomResourceLambda.Arn
    Type: "Custom::CustomResource"
